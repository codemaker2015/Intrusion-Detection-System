/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intrusion_detection_system_ma;

import classifier_package.Evaluation;
import dbpackage.dbclass;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.LineNumberReader;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jojoj
 */
public class RepEvaluation extends javax.swing.JFrame {

    /**
     * Creates new form RepEvaluation
     */
    public RepEvaluation() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 700));
        setMinimumSize(new java.awt.Dimension(800, 700));
        setPreferredSize(new java.awt.Dimension(800, 700));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Training Set ");

        jTextField1.setText("train.csv");

        jButton1.setText("Perform REP Tree Evaluation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jLabel2)
                        .addGap(38, 38, 38)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton1)
                        .addGap(0, 140, Short.MAX_VALUE))
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                        try
                        {
                    dbclass db=new dbclass();
                    double c=db.createdataset();        
                            
                    String fc=jFileChooser1.getSelectedFile().getAbsolutePath();
                    
                    File file=new File(fc);
                                        
                    File file1=new File("F:\\Project\\Intrusion_Detection_System_MA\\train.csv");
            
                    FileWriter fr = new FileWriter(file1, true);
                    BufferedWriter br = new BufferedWriter(fr);
                    
                    BufferedReader br1 = new BufferedReader(new FileReader(file)); 
          
                    String line = br1.readLine(); 

                    double result=0;
                    while (line != null) 
                    { 
                        br.write("\n");
                        br.write(line);; 
                        line = br1.readLine(); 
                        result++;
                        
                    } 
                    
                    br.close();
                    br1.close();           
                    
                    double percentage=(c/(c+result))*100; 
                    
                    Evaluation e=new Evaluation();
                    e.mainmenu("weka.classifiers.trees.REPTree"," ","-t","train.csv","-split-percentage",""+percentage,"-preserve-order","-classifications","weka.classifiers.evaluation.output.prediction.PlainText");
                    
                    Thread.sleep(2000);

                    String str="";
            File f = new File("F:\\Project\\Intrusion_Detection_System_MA\\test.csv");
            BufferedReader in = new BufferedReader(new FileReader(f));

            File f1 = new File("F:\\Project\\Intrusion_Detection_System_MA\\reptree_eval.txt");
            BufferedReader in1 = new BufferedReader(new FileReader(f1));
            
            String[] b=new String[100];
            int i=0,j=0;
            while((str = in1.readLine()) != null)
            {
                if(j>4)
                {
                    System.out.println(str);
                    str=str.replaceAll("\\s+"," ");
                    String[] x=str.split(" ");
                    if(str.length()==0)
                        break;
                    b[i]=x[3].split(":")[1];
                    
                    i++;                    
                }  
                j++;
            }
            for(int k=0; k< b.length; k++){
                        System.out.println(k+"  "+b[k]);
                     }
            
            DefaultTableModel model=new DefaultTableModel();
            jTable1.setModel(model);
            
            model.addColumn("Duration");
            model.addColumn("Protocol_Type");            
            model.addColumn("Service");            
            model.addColumn("Flag");            
            model.addColumn("Src_Bytes");            
            model.addColumn("Dst_Bytes");            
            model.addColumn("Land");            
            model.addColumn("Wrong_Fragnitinuous");           
            model.addColumn("Urgent");            
            model.addColumn("Hot");            
            model.addColumn("Num_Failed_Logins");            
            model.addColumn("Logged_In");            
            model.addColumn("Num_Compromised");           
            model.addColumn("Root_Shell");           
            model.addColumn("Su_Attempt");          
            model.addColumn("Num_Root");           
            model.addColumn("Num_file_creations");   
            model.addColumn("Num_shells");         
            model.addColumn("Num_access_files");        
            model.addColumn("Num_outbound_cmds");     
            model.addColumn("Is_host_login");         
            model.addColumn("Is_guest_login");        
            model.addColumn("Count");         
            model.addColumn("Srv_count");     
            model.addColumn("Serror_rate");    
            model.addColumn("Srv_serror_rate");   
            model.addColumn("Rerror_rate");       
            model.addColumn("Srv_rerror_rate");   
            model.addColumn("Same_srv_rate");     
            model.addColumn("Diff_srv_rate");     
            model.addColumn("Srv_diff_host_rate");
            model.addColumn("Dst_host_count");      
            model.addColumn("Dst_host_srv_count");  
            model.addColumn("Dst_host_same_srv_rate");     
            model.addColumn("Dst_host_diff_srv_rate");     
            model.addColumn("Dst_host_same_src_port_rate");   
            model.addColumn("Dst_host_srv_diff_host_rate");    
            model.addColumn("Dst_host_serror_rate");          
            model.addColumn("Dst_host_srv_serror_rate");      
            model.addColumn("Dst_host_rerror_rate");          
            model.addColumn("Dst_host_srv_rerror_rate");      
            model.addColumn("Class");
           
            
            Object[] row=new Object[42];
            i=0;
            while ((str = in.readLine()) != null) {
                String[] a=str.split(",");
                System.out.println(a.length);
                System.out.println(str);
                
                row[0]=a[0];
                row[1]=a[1];
                row[2]=a[2];
                row[3]=a[3];
                row[4]=a[4];
                row[5]=a[5];
                row[6]=a[6];
                row[7]=a[7];
                row[8]=a[8];
                row[9]=a[9];
                row[10]=a[10];
                row[11]=a[11];
                row[12]=a[12];
                row[13]=a[13];
                row[14]=a[14];
                row[15]=a[15];
                row[16]=a[16];
                row[17]=a[17];
                row[18]=a[18];
                row[19]=a[19];
                row[20]=a[20];
                row[21]=a[21];
                row[22]=a[22];
                row[23]=a[23];
                row[24]=a[24];
                row[25]=a[25];
                row[26]=a[26];
                row[27]=a[27];
                row[28]=a[28];
                row[29]=a[29];
                row[30]=a[30];
                row[31]=a[31];
                row[32]=a[32];
                row[33]=a[33];
                row[34]=a[34];
                row[35]=a[35];
                row[36]=a[36];
                row[37]=a[37];
                row[38]=a[38];
                row[39]=a[39];
                row[40]=a[40];
                row[41]=b[i];

                i++;
                model.addRow(row);
            }

                    

                        }
                        catch(Exception e)
                        {
                            System.out.println("error in evaluation "+e);
                        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RepEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RepEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RepEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RepEvaluation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RepEvaluation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
